modulo matInfImpl implementa Matriz infinita de booleanos {
    var elems: Array<Array<Bool>>
    var switch: Bool

    InvRep (m': matInfImpl) {
        True
    }

    proc crear() : matInfImpl 
    complejidad O(1)
    {
        res := new matInfImpl;
        res.elems := new Array<Array<Bool>>();
        res.switch := False; 
    }

    prc asignar(inout m: matInfImpl; in f,c: int; in t:Bool) : matInfImpl
    complejidad O(f*c,c)
    //asumo que al crear un array<Bool> son todas falsas las posiciones
    {
        if (t == False && m.switch == False) {
            return;
        } else {
            if (f < m.elems.length) {
                if (c >= m.elems[f].length) {
                    nuevo_arr := new Array<Bool>(c);
                    m.elems[f] := nuevo_arr;
                }
                if (m.switch == True) {
                    m.elems[f][c] := !t;
                } else {
                    m.elems[f][c] := t;
                }
            } else {
                nueva_mat := new Array<Bool>(f);
                for (int i = 0; i < m.elems.length; i++) {
                nueva_mat[i] := m.elems[f];
                }
                nueva_mat[f] = new Array<Bool>(c); 
                
                if (m.switch == True) {
                    m.elems[f][c] := !t;
                } else {
                    m.elems[f][c] := t;
                }

                m.elems = nueva_mat;
            }  
        }
    }

    proc ver(in m: matInfImpl, in f,c: int) : booleanos
    complejidad O(1)
    {
        if (f >= m.elems.length) {
            res := false;
        } else {
            if (c >= m.elems[f].length) {
                res := false;
            } else {
                res := m.elems[f][c];
            }
        }
        if (m.switch == True) {
            return !res;        
        } else {
            return res;
        }
    }

    proc complementar(inout m:matInfImpl)
    complejidad O(1)
    {
        m.switch := True;
    }
}
-----------------------------------------------------
Ejercicio 4

NodoMatFin es struct{
    pos int; 
    dato: int;
}

modulo matFinImpl implementa matrizFinita {
    elems: Vector<NodoMatFin>> // está ordenada y los elementos no tienen identificador de columna ni de fila, si no una posición entre 1 y cant_filas*cant_columnas
    cant_filas: int
    cant_columnas: int

    proc crear(filas: int, columnas: int) : matFinImpl
    requiere filas > 0 & columnas > 0
    complejidad O(1)
    {
        res := new matFinImpl;
        res.elems := new vectorVacío();
        res.cant_filas := filas;
        res.cant_columnas := columnas;
    }

    proc definir(m: matFinImpl, fila: int, columna: int, elem: int) : matFinImpl
    requiere fila*columna <= cant_filas*cant_columnas
    complejidad O(n) // Esto se debe a recorrer todo el Vector y después en el peor caso volverlo a copiar con el elemento añadido. 
    {                // En una lista enlazado seguiría siendo lineal por el recorrido, pero podría implementarse la inserción para que sea menos costoso en general
                     // El tema es que no está definida la inserción "en el medio" para las listas enlazadas
        if (elem != 0) {
            pos_elem := (fila - 1)*columna + columna; // esto se puede demostrar matemáticamente que resulta para todo elemento. 
            
            i := 0;
            while (i < m.elems.longitud && m.elems[i].pos < pos_elem) {
                i++;
            } 

            if (m.elems[i].pos == pos_elem) {
                m.elems[i].dato = elem;
            } else if (i == m.elems.longitud) {
                NodoMatFin nodo_nuevo := new NodoMatFin(pos: pos_elem, dato: elem);
                m.elems.agregarAtrás(nodo_nuevo);
            } else { // m.elems[i].pos > pos_elem
                nuevo := new vectorVacío();
                j := 0;
                while (j < i - 1) {
                    nuevo.agregarAtrás(m.elems[j]);
                    j++;
                }
                NodoMatFin nodo_nuevo := new NodoMatFin(pos: pos_elem, dato: elem);
                nuevo.agregarAtrás(nodo_nuevo);
                while (j < m.elems.longitud) {
                    nuevo.agregarAtrás(m.elems[j]);
                    j++;
                }
                m.elems := nuevo;
            }
        }
    }

    proc obtener(m: matInfImpl, fila: int, columna: int) : int
    {
        pos_elem := (fila - 1)*columna + columna; 
        res := 0
        
        i := 0;
        while (i < m.elems.longitud && m.elems[i].pos < pos_elem) {
            i++;
        } 
    
        if (m.elems[i].pos == pos_elem) {
            res := m.elems[i].dato;
        }

        return res;
    }

    proc sumarMatrices(m: matInfImpl, n: matInfImpl) : matInfImpl
    {
        res := crear(m.filas,m.columnas);
        i := 0;
        j := 0;

        while(i < m.elems.longitud && j < n.elems.longitud) {
            nodo_m := m.elems[i].pos;
            nodo_n := n.elems[j].pos;
            if (nodo_m.pos == nodo_n.pos) {
                nuevo := new NodoMatFin(pos: nodo_m.pos, dato: nodo_m.dato+nodo_n.dato);
                res.elems.agregarAtrás(nuevo);
                j++;
                i++;
            } else if (nodo_m.pos < nodo_n.pos) {
                nuevo := new NodoMatFin(pos: nodo_m.pos, dato: nodo_m.dato);
                res.elems.agregarAtrás(nuevo);
                i++;
            } else {
                nuevo := new NodoMatFin(pos: nodo_n.pos, dato: nodo_n.dato);
                res.elems.agregarAtrás(nuevo);
                j++;
            }
        }

        return res;
    }
}

-----------------------------------------------
data: diccionarioLineal<K,V>
    cant: diccionarioLineal<K,int>    

    proc nuevoDiccionario() : DiccConHistoriaImpl<K,V>
    complejidad O(1)
    {
        res := new DiccConHistoriaImpl;
        res.data := diccionarioVacio();
        res.cant := diccionarioVacio();
    }

    proc esta(in d: DiccConHistoriaImpl<K,V>, in k: K) : bool
    O(n)
    {
        res := d.data.esta(k); 
        return res;
    }

    proc definir(inout d:DiccionarioConHistoria<K,V>, in k: K, in v: V)
    O(n)
    {
        if (esta(d,k)) {
            cant_ant := d.cant.obtener(k);
            d.cant.definir(k,cant_ant+1);
        } else {
            d.cant.definir(k,1);
        }

        d.data.definir(,k,v);
    }

    proc obtener(in d: DiccionarioConHistoria<K,V>, in k: K) : V
    O(n)
    {
        res := d.data.obtener(k);
        return res;
    }

    proc borrar(in d: DiccionarioConHistoria<K,V>, in k: K)
    O(n)
    {
        res := d.data.borrar(k);
        return res;
    }

    proc cantSignificados(in d: DiccionarioConHistoria<K,V>, in k: K) : int
    O(n)
    {
        res := d.cant.obtener(k);
        return res;
    }

----------------------------------------------
Dia es int

modulo ClientesBBVAImpl implementa IngresosAlBanco {
    cantPorDia: vector<Dia>
    cantAcum: vector<Dia>


    proc nuevosIngresos() : ClientesBBVAImpl
    complejidad O(1)
    {
        res = new ClientesBBVAImpl;
        res.cantPorDia := vacia();
        res.cantAcum := vacia();
    }

    proc registrarDia(inout i: ClientesBBVAImpl, in cant: int) 
    complejidad O(n)
    {
        i.cantPorDia.agregarAtrás(cant);
        if (i.cantAcum.length == 0) {
            i.cantAcum.agregarAtrás(cant);
        } else {
            cantAcumAnterior = i.cantAcum.obtener(res.cantAcum.lenght - 1);
            i.cantAcum.agregarAtrás(cantAcumAnterior + cant);
        }
    }

    proc cantDias(in i: ClientesBBVAImpl) : int
    complejidad O(1)
    {
        res = i.cantAcum.length;
        return res; 
    }

    proc cantPersonas(in i: ClientesBBVAImpl, in desde: int, in hasta: int) : int
    complejidad O(1)
    {
        cantDesde = i.cantAcum.obtener(desde);
        cantHasta = i.cantAcum.obtener(hasta-1);
        res = cantHasta-cantDesde;
        return res;
    }

    proc mediana(in i:ClientesBBVAImpl) : int   //The median of a sorted array of size n is defined as the middle element when n is odd and the average of the two middle elements when n is even. 
    complejidad O(n) {
        longitud := i.cantAcum.length;
        res := 0;
        if (longitud mod 2 == 0) {
            elem1 := i.cantAcum.obtener(longitud/2 -1);
            elem2 := i.cantAcum.obtener(longitud/2);
            res := (elem1+elem2)/2
        } else {
            res := i.cantAcum.obtener(longitud/2);
        }
        return res;
    }
}

---------------------------------------------------------------------
Ejercicio 9 

1. Podemos tener una matriz de 101 x 101 de 0's y 1's, donde si en la posición a,b 
hay un 0, significa que a no está relacionado con b, pero si hay 1, sí lo está.

modulo relaciones101 { //qué original el nombre



    var elems: Array[Array[int]]

    InvRep(r : relaciones101) {
        (∀ i: int)(0 ≤ i ≤ 101 =>L (∀ j: int)(0 ≤ i ≤ 101 =>L r.elems[i][j] = 0 || r.elems[i][j] = 1))
    }

    funcAbs no se puede hacer porque no hay tad

    proc nuevo() : relaciones101
    O(1) // I mean, son 101^2 posiciones de memorias reservadas, pero es una constante.
    {
    res := new relaciones101;
    res.elems := new Array[101];
    for(int i = 0; i <= 101; i++) {
        res.elems[i] := new Array[101];
    }
    return res;
    }

    proc agregar(inout r:relaciones101, in a: int, b: int)
    complejidad O(1)
    {
        r.elems[a][b] = 1;
    }

    proc borrar(inout r:relaciones101, in a: int, b: int)
    complejidad O(1)
    {
        r.elems[a][b] = 0;
    }
 }

 2. Si el intervalo de naturales acotado es [a,b], entonces podemos armar una matriz de b-a x b-a,
 con la misma lógica que antes.
 Acá la operación nuevo cuesta O((b-a) * (b-a)), las otras O(1)

 3. Podemos usar la matInfImpl, pero en vez de 1's y 0's, True y False.
 No sé si hay una mejor estructura.

-----------------------------------------
modulo Sistema {
    materiasConNotas DiccionarioAVL<materia, Vector<int>>
    materiasPorAlumno DiccionarioTrie<alumno, DiccionarioAVL<materia, nota>>

Observaciones:
- Para cada materia tengo un array de 10 posiciones donde cuento cuántos alumnos se sacaron esa nota. Al registrar una nota sumo uno
- Guardo las notas de un alumno en un diccionario de trie. Las agrego al final. Fijarse que la complejidad no se va, porque buscar/añadir en un Trie es O(tamaño de la clave), 
pero como las claves están acotadas, termina quedando por la búsqueda dentro del DiccionarioAVL es O(m)

    proc crearSistema(in alumnos: conjLineal<Alumno>) { // no lo pide pero who cares O(alumnos.length * log(alumnos.length))
        res.materiasConNotas := new DiccionarioTrie();
        res.materiasPorAlumno := new DiccionarioAVL();
        for(int i = 0; i < alumnos.length, i++) {
            dicc := new DiccionarioAVL();
            res.materiasPorAlumno.definir(alumno,dicc);
        }
    }
    proc RegistrarMateria(inout s: Sistema, in m: materia) {
        notas := new vectorVacio();
        for (int i = 0; i < 11; i++) { // O(11) = O(1)
            notas.agregarAtras(0);
        }
        s.materiasConNotas.definir(m,notas); // O(log(m));
    }

    proc RegistrarNota(inout s: Sistema, in m: materia, in a: alumno, in n: nota) { //como precondicion la materia esta definida en el sistema y el alumno podo o no haber sido calificado antes en la misma
        cant_ant := s.materiasConNotas.obtener(m).obtener(n); // O(log(m))
        s.materiasConNotas..obtener(m).modificarPosicion(n,cant_ant++); // O(log(m))

        dicc_materias := s.materiasPorAlumno.obtener(a);  // O(log(m))
        está_materia := dicc_materias.esta(materia); // O(log(m))
        dicc_materias.definir(materia,nota)// O(log(m))
    }

    proc NotaDeAlumno(in s: Sistema, in a: alumno, m: materia): nota {
        res := s.materiasPorAlumno.obtener(alumno).obtener(materia); // O(log(m)) + O(log(m)) = O(log(m))
        return res;
    }

    proc CantAlumnosConNota(in s: Sistema, in m: materia): nat {
        notas_materia := s.materiasConNotas.obtener(m); // O(log(m))
        sum := 0;
        for(int i = 0; i < 11; i++) { // O(1)
            sum += notas_materias[i];
        }
        return sum;
    }

    proc CantAlumnosAprobados(in s: Sistema, in m: materia): nat {
        notas_materia := s.materiasConNotas.obtener(m); // O(log(m))
        sum := 0; 
        for(int i = 7; i < 11; i++) { // O(1)
            sum += notas_materias[i];
        }
        return sum;
    }
}
