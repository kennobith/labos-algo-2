modulo matInfImpl implementa Matriz infinita de booleanos {
    var elems: Array<Array<Bool>>
    var switch: Bool

    InvRep (m': matInfImpl) {
        True
    }

    proc crear() : matInfImpl 
    complejidad O(1)
    {
        res := new matInfImpl;
        res.elems := new Array<Array<Bool>>();
        res.switch := False; 
    }

    prc asignar(inout m: matInfImpl; in f,c: int; in t:Bool) : matInfImpl
    complejidad O(f*c,c)
    //asumo que al crear un array<Bool> son todas falsas las posiciones
    {
        if (t == False && m.switch == False) {
            return;
        } else {
            if (f < m.elems.length) {
                if (c >= m.elems[f].length) {
                    nuevo_arr := new Array<Bool>(c);
                    m.elems[f] := nuevo_arr;
                }
                if (m.switch == True) {
                    m.elems[f][c] := !t;
                } else {
                    m.elems[f][c] := t;
                }
            } else {
                nueva_mat := new Array<Bool>(f);
                for (int i = 0; i < m.elems.length; i++) {
                nueva_mat[i] := m.elems[f];
                }
                nueva_mat[f] = new Array<Bool>(c); 
                
                if (m.switch == True) {
                    m.elems[f][c] := !t;
                } else {
                    m.elems[f][c] := t;
                }

                m.elems = nueva_mat;
            }  
        }
    }

    proc ver(in m: matInfImpl, in f,c: int) : booleanos
    complejidad O(1)
    {
        if (f >= m.elems.length) {
            res := false;
        } else {
            if (c >= m.elems[f].length) {
                res := false;
            } else {
                res := m.elems[f][c];
            }
        }
        if (m.switch == True) {
            return !res;        
        } else {
            return res;
        }
    }

    proc complementar(inout m:matInfImpl)
    complejidad O(1)
    {
        m.switch := True;
    }
}
-----------------------------------------------------
NodoMatFin es struct{
    dato: int;
    posFila: int;
    posColumna: int;
}

modulo matFinImpl implementa matrizFinita {
    elems: Array<listaEnlazada<NodoMatFin>>
    cant_filas: int
    cant_columnas: int

    proc crear(filas: int, columnas: int) : matFinImpl
    requiere filas > 0 & columnas > 0
    complejidad O(1)
    {
        res := new matFinImpl;
        res.elems := new Array<listaEnlazada<NotoMatFin>(filas);
        dim.cant_filas := filas;
        dim.cant_columnas := columnas;
    }

    proc definir(m: matFinImpl, fila: int, columna: int, elem: int) : matFinImpl
    {
        if (elem != 0) {
            if (obtener(m,fila,columna) == 0) {
                nodo = new NodoMatFin(fila,columna,elem) //cambiar para mantener la lista ordenada por columna
                m.elems[fila] := agregarAdelante.m.elems[fila](nodo);
            } else {
                it = iterador(m.elems[fila]);
                while (it.posColumna != columna) {
                    it.siguiente;
                }
                it.dato := elem;
            }
        }
    }

    proc obtener(m: matInfImpl, fila: int, columna: int) : int
    {
        it := iterador(m.elems[fila]);
        while(haySiguiente(it) && it.posColumna != columna) {
            it.siguiente;
        }
        if (haySiguiente(it)) {
            res = it.dato;
            return res;
        } else {
            return 0;
        }
    }

    proc sumarMatrices(m: matInfImpl, n: matInfImpl) : matInfImpl
    {
        res := crear(m.filas,m.columnas);
        for(int i = 0; i < m.filas; i++) {
            itM = iterador(m.elems[i]);
            itN = iterador(m.elems[i]);
            while(haySiguiente(itM) && haySiguiente(itN)) {
                if (itM.posColumna == itN.posColumna) {
                    nodo = new NodoMatFin(i,itM.posColumna,itM.dato+itN.dato);
                    itM = itM.siguiente;
                    itN = itN.siguiente;
                } else if (itM.posColumna < itN.posColumna) {
                    nodo = new NodoMatFin(i,itM.posColumna,itM.dato);
                    itM = itM.siguiente;
                } else {
                    nodo = new NodoMatFin(i,itN.posColumna,itM.dato);
                    itN = itN.siguiente;
                }
                res[i].agregarAtr치s(nodo);
            }
        }
        return res;
    }
}

-----------------------------------------------
data: diccionarioLineal<K,V>
    cant: diccionarioLineal<K,int>    

    proc nuevoDiccionario() : DiccConHistoriaImpl<K,V>
    complejidad O(1)
    {
        res := new DiccConHistoriaImpl;
        res.data := diccionarioVacio();
        res.cant := diccionarioVacio();
    }

    proc esta(in d: DiccConHistoriaImpl<K,V>, in k: K) : bool
    O(n)
    {
        res := d.data.esta(k); 
        return res;
    }

    proc definir(inout d:DiccionarioConHistoria<K,V>, in k: K, in v: V)
    O(n)
    {
        if (esta(d,k)) {
            cant_ant := d.cant.obtener(k);
            d.cant.definir(k,cant_ant+1);
        } else {
            d.cant.definir(k,1);
        }

        d.data.definir(,k,v);
    }

    proc obtener(in d: DiccionarioConHistoria<K,V>, in k: K) : V
    O(n)
    {
        res := d.data.obtener(k);
        return res;
    }

    proc borrar(in d: DiccionarioConHistoria<K,V>, in k: K)
    O(n)
    {
        res := d.data.borrar(k);
        return res;
    }

    proc cantSignificados(in d: DiccionarioConHistoria<K,V>, in k: K) : int
    O(n)
    {
        res := d.cant.obtener(k);
        return res;
    }

----------------------------------------------
Dia es int

modulo ClientesBBVAImpl implementa IngresosAlBanco {
    cantPorDia: vector<Dia>
    cantAcum: vector<Dia>


    proc nuevosIngresos() : ClientesBBVAImpl
    complejidad O(1)
    {
        res = new ClientesBBVAImpl;
        res.cantPorDia := vacia();
        res.cantAcum := vacia();
    }

    proc registrarDia(inout i: ClientesBBVAImpl, in cant: int) 
    complejidad O(n)
    {
        i.cantPorDia.agregarAtr치s(cant);
        if (i.cantAcum.length == 0) {
            i.cantAcum.agregarAtr치s(cant);
        } else {
            cantAcumAnterior = i.cantAcum.obtener(res.cantAcum.lenght - 1);
            i.cantAcum.agregarAtr치s(cantAcumAnterior + cant);
        }
    }

    proc cantDias(in i: ClientesBBVAImpl) : int
    complejidad O(1)
    {
        res = i.cantAcum.length;
        return res; 
    }

    proc cantPersonas(in i: ClientesBBVAImpl, in desde: int, in hasta: int) : int
    complejidad O(1)
    {
        cantDesde = i.cantAcum.obtener(desde);
        cantHasta = i.cantAcum.obtener(hasta-1);
        res = cantHasta-cantDesde;
        return res;
    }

    proc mediana(in i:ClientesBBVAImpl) : int   //The median of a sorted array of size n is defined as the middle element when n is odd and the average of the two middle elements when n is even. 
    complejidad O(n) {
        longitud := i.cantAcum.length;
        res := 0;
        if (longitud mod 2 == 0) {
            elem1 := i.cantAcum.obtener(longitud/2 -1);
            elem2 := i.cantAcum.obtener(longitud/2);
            res := (elem1+elem2)/2
        } else {
            res := i.cantAcum.obtener(longitud/2);
        }
        return res;
    }
}
